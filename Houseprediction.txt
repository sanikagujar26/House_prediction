# Step 1: Import necessary libraries   
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

# Step 2: Prepare the expanded data (house size and price)
data = {
    'house_size': [1000, 1200, 1400, 1500, 1800, 2000, 2400, 2600, 2800, 3000, 3200, 3500, 3700, 4000],
    'Price': [200, 250, 300, 320, 360, 400, 450, 480, 520, 550, 600, 700, 740, 800]
}

# Convert the dictionary into a pandas DataFrame
df = pd.DataFrame(data)

# Step 3: Split the data into input (X) and output (y)
X = df[['house_size']]  # Independent variable (house size)
y = df['Price']  # Dependent variable (house price)``

# Step 4: Split the data into training (80%) and testing set (20%)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 5: Initialize and train the Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Step 6: Make predictions using the entire dataset for the best fit line
y_all_pred = model.predict(X)  # Predicting for the entire dataset

# Step 7: Evaluate the model using Mean Squared Error (MSE)
mse = mean_squared_error(y_test, model.predict(X_test))
print(f"Mean Squared Error: {mse:.2f}")

# Step 8: Plot the dataset with the best fit line
plt.scatter(X_train, y_train, color='blue', label='Training Data')
plt.scatter(X_test, y_test, color='green', label='Test Data')
plt.plot(X, y_all_pred, color='red', label='Best Fit Line')
plt.xlabel('House Size (sq.ft)')
plt.ylabel('Price (in $1000s)')
plt.title('House Price Prediction')
plt.legend()
plt.show()